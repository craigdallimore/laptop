---

# Various
# -----------------------------------------------------------------------------

- name: Install gems
  gem: name={{item}} state=present
  with_items:
    - scss-lint

# ZSH
# -----------------------------------------------------------------------------

- name: test whether or not oh-my-zsh has been cloned before
  shell: if [ -f ~/.oh-my-zsh/oh-my-zsh.sh ]; then true; else false; fi
  register: result
  ignore_errors: True

# `git clone --depth=1` to improve speed
- name: git clone oh-my-zsh repo
  git: repo=https://github.com/robbyrussell/oh-my-zsh.git
       dest=~/.oh-my-zsh
       depth=1
  when: result|failed

- name: git clone zsh-syntax-highlighting
  git: repo=git://github.com/zsh-users/zsh-syntax-highlighting.git
       dest=~/.oh-my-zsh/zsh-syntax-highlighting
  when: result|failed

- name: set zsh as default user shell
  become: true
  shell: chsh -s $(which zsh) {{whoami}}

# NVM
# -----------------------------------------------------------------------------
- name: Check if nvm is installed
  shell: if [ -f {{nvm.path}}/nvm.sh ]; then true; else false; fi
  register: nvm_check
  ignore_errors: True

- name: Install nvm
  become: True
  git: repo=https://github.com/creationix/nvm.git dest={{nvm.path}} version={{ nvm.version}}
  when: nvm_check|failed

- name: Install node {{ nvm.node_version }}
  become: True
  command: bash -c '. {{nvm.path}}/nvm.sh; nvm install {{nvm.node_version}}'

- name: Check if {{nvm.node_version}} is the default node version
  command: "node --version"
  register: nvm_check_default
  changed_when: nvm_check_default.stdout != "v{{nvm.node_version}}"
  ignore_errors: True

- name: Set default node version to {{ nvm.node_version }}
  command: bash -c '. {{nvm.path}}/nvm.sh; nvm alias default {{ nvm.node_version }}'
  when: nvm_check_default|failed

# NPM
# -----------------------------------------------------------------------------
- name: Install npm global modules
  command: npm i -g {{item}}
  with_items:
    - eslint
    - eslint-plugin-react
    - eslint-plugin-babel
    - jscs
    - esprima-fb

# Neovim
# -----------------------------------------------------------------------------
- name: check neovim symlink
  stat: path=~/.config/nvim
  register: nvim_sym

- name: check nvimrc symlink
  stat: path=~/.config/nvim/init.vim
  register: nvimrc_sym

- name: setup | vim-plug directory
  file: path=~/.vim/autoload
        state=directory

- name: setup | neovim directory
  file: path=~/.config/nvim
        state=directory
  when: nvim_sym.stat.islnk is not defined

- name: symlink | .vim -> .config/nvim
  file: src=~/.vim
        dest=~/.config/nvim
        state=link
        force=yes
  when: nvim_sym.stat.islnk is not defined

- name: symlink | .vimrc -> .config/nvim/init.vim
  file: src=~/.vimrc
        dest=~/.config/nvim/init.vim
        state=link
        force=yes
  when: nvimrc_sym.stat.islnk is not defined

- name: install | vim-plug
  get_url:
    url: https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    dest: ~/.vim/autoload/plug.vim
    force: yes

- name: install | plugins
  command: nvim "+silent! PlugInstall!" +qall!

- name: install | ternjs
  command: npm i
  args:
    chdir: ~/.vim/plugged/tern_for_vim

# Haskell
# -----------------------------------------------------------------------------
- name: Install useful haskell utilities
  command: stack install {{item}}
  with_items:
    - criterion
    - hoogle
